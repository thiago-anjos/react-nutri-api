{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","nutri","this","fetch","then","response","status","json","data","console","log","setState","catch","err","className","map","item","key","id","titulo","src","capa","alt","categoria","subtitulo","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yQAqDeA,G,kBAhDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAHO,E,iFAOE,IAAD,OACbD,EAAQE,KAAKF,MAEjBG,MADU,wDAEPC,MACC,SAACC,GACwB,MAApBA,EAASC,OAIZD,EAASE,OAAOH,MAAK,SAACI,GACpBC,QAAQC,IAAIF,GACZR,EAAMC,MAAQO,EACd,EAAKG,SAASX,MANdS,QAAQC,IAAI,YAUjBE,OAAM,SAACC,GACNJ,QAAQC,IAAI,sB,+BAKhB,OACE,yBAAKI,UAAU,aACb,gCAAQ,oDACPZ,KAAKF,MAAMC,MAAMc,KAAI,SAACC,GACrB,OACE,6BAASC,IAAKD,EAAKE,GAAIJ,UAAU,QAC7B,4BAAQA,UAAU,UAAUE,EAAKG,QACjC,yBAAKC,IAAKJ,EAAKK,KAAMP,UAAU,OAAOQ,IAAKN,EAAKO,YAChD,uBAAGT,UAAU,aAAaE,EAAKQ,WAC/B,4BAAQV,UAAU,QAAQW,KAAK,KAA/B,oB,GAzCEC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.ca49daa8.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.scss';\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      nutri: []\n    }\n  }\n\n  componentDidMount(){\n    let state = this.state;\n    let url = \"https://www.sujeitoprogramador.com/rn-api/?api=posts\";\n    fetch(url)\n      .then(\n        (response) =>{\n          if(response.status !== 200){\n            console.log('error')\n            return;\n          }\n          response.json().then((data)=>{\n            console.log(data);\n            state.nutri = data;\n            this.setState(state);\n          }) \n        }\n      )\n      .catch((err)=>{\n        console.log('Erro ao fetch')\n      })\n  }\n\n  render(){\n    return(\n      <div className=\"container\">\n        <header><strong>React Nutri API</strong></header>\n        {this.state.nutri.map((item) => {\n          return(\n            <article key={item.id} className=\"post\">\n                <strong className=\"titulo\">{item.titulo}</strong>\n                <img src={item.capa} className=\"capa\" alt={item.categoria}/>\n                <p className=\"subtitulo\">{item.subtitulo}</p>\n                <button className=\"botao\" href=\"#\">Acessar</button>\n            </article>\n          );\n        })}\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}